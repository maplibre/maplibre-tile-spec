package com.mlt.converter.encodings.fsst;

import java.util.Base64;
import java.util.concurrent.TimeUnit;
import org.openjdk.jmh.annotations.*;

@State(Scope.Benchmark)
@OutputTimeUnit(TimeUnit.SECONDS)
@BenchmarkMode(Mode.Throughput)
@Threads(value = 1)
@Warmup(iterations = 5)
@Measurement(iterations = 5)
@Fork(value = 1)
public class FsstBenchmark {

  private static final Fsst JAVA = new FsstJava();
  private static final Fsst JNI = new FsstJni();

  // ~30 bytes
  private static final byte[] SMALL =
      Base64.getDecoder().decode("SGV1YmFjaExpcHBlS2V0dGJhY2hTdGV2ZXI=");
  private static final SymbolTable SMALL_ENCODED = JAVA.encode(SMALL);
  // ~600 bytes
  private static final byte[] MEDIUM =
      Base64.getDecoder()
          .decode(
              "UsO8c3RlcmJlcmdFaXNlbmJlcmdLYXNzZWxlciBLdXBwZUJpbHN0ZWluVm9nZWxoZXJkTWlsc2VidXJnSG9oZSBHZWJhSGVsZHJhc3RlaW5PaG1iZXJnR3Jvw59lciBLbm9sbGVuU2Nod2VmZWxrb3BmR3Jvw59lciBCZWVyYmVyZ0FsdGVyIEJlcmcgKEhhaW5pY2gpUG9wcGVuYmVyZ0Jyb2NrZW5Sw7xja2Vyc2JpZWxHcm/Dn2VyIEthbG1iZXJnS8O8bnplbHNiZXJnSm9zZXBoc2jDtmhlV2VnZW5lcnNrb3BmUm/Dn2LDvGhsTcO2bmNoc2JlcmdXaW5ka25vbGxlbkVyYmJlcmdTdGVsbGJlcmdEb3JuYmVyZ0xvdGhyYWjDvGdlbEZlaHJlbmJlcmdBaGxzYnVyZ0hlaW5yaWNoc2jDtmhlV2V0dGVuYnVyZyAoSGFpbmxlaXRlKU3DvGhsZW5zdGVpblNjaG5lZWtvcGZBbGhlaW1lckdyb8OfZSBMYWl0ZVNvaXNiZXJnS2V1ZGVsc2t1cHBlRXNwaWdNYXVsa3VwcGVWaWt0b3JzaMO2aGVHcm/Dn2VyIEF1ZXJiZXJnSG9ja2VscmFpbkJvY2tHcm/Dn2VyIEV0dGVyc2JlcmdSaWVjaGhlaW1lciBCZXJnQnViZW5iYWRlciBTdGVpbldvbGZza29wZkJ1Y2hzY2hpcm1iZXJnU2F1aMO8Z2VsSGFuZ3N0ZWluSHV0c2JlcmdHZWllcnNow7xnZWxHZXJiZXJzdGVpblJvc3Nrb3BmV2lja2VuLUJlcmdCcmFha2JlcmdTY2htaWVkc3dpZXNlbmtvcGZCw7xobEdyb8OfZXIgRmluc3RlcmJlcmdHcm");
  private static final SymbolTable MEDIUM_ENCODED = JAVA.encode(MEDIUM);
  // ~23kb
  private static final byte[] LARGE =
      Base64.getDecoder()
          .decode(
              "");
  private static final SymbolTable LARGE_ENCODED = JAVA.encode(LARGE);
  // 230kb
  private static final byte[] XLARGE;
  private static final SymbolTable XLARGE_ENCODED;

  static {
    XLARGE = new byte[LARGE.length * 10];
    for (int i = 0; i < 10; i++) {
      System.arraycopy(LARGE, 0, XLARGE, i * LARGE.length, LARGE.length);
    }
    XLARGE_ENCODED = JAVA.encode(XLARGE);
  }

  @Benchmark
  public SymbolTable encodeSmallJava() {
    return JAVA.encode(SMALL);
  }

  @Benchmark
  public SymbolTable encodeMediumJava() {
    return JAVA.encode(MEDIUM);
  }

  @Benchmark
  public SymbolTable encodeLargeJava() {
    return JAVA.encode(LARGE);
  }

  @Benchmark
  public SymbolTable encodeExtraLargeJava() {
    return JAVA.encode(XLARGE);
  }

  @Benchmark
  public SymbolTable encodeSmallJni() {
    return JNI.encode(SMALL);
  }

  @Benchmark
  public SymbolTable encodeMediumJni() {
    return JNI.encode(MEDIUM);
  }

  @Benchmark
  public SymbolTable encodeLargeJni() {
    return JNI.encode(LARGE);
  }

  @Benchmark
  public SymbolTable encodeExtraLargeJni() {
    return JNI.encode(XLARGE);
  }

  @Benchmark
  public byte[] decodeSmallJava() {
    return JAVA.decode(SMALL_ENCODED);
  }

  @Benchmark
  public byte[] decodeMediumJava() {
    return JAVA.decode(MEDIUM_ENCODED);
  }

  @Benchmark
  public byte[] decodeLargeJava() {
    return JAVA.decode(LARGE_ENCODED);
  }

  @Benchmark
  public byte[] decodeExtraLargeJava() {
    return JAVA.decode(XLARGE_ENCODED);
  }
}

import {StringSharedDictionaryVector} from "../../../../src/vector/dictionary/stringSharedDictionaryVector";
import {DictionaryDataVector} from "../../../../src/vector/dictionary/dictionaryDataVector";
import BitVector from "../../../../src/vector/flat/bitVector";

describe("StringSharedDictionaryVector", () => {
    let offsetBuffer: Int32Array;
    let dictionaryBuffer: Uint8Array;
    let dictionaryDataVectors: DictionaryDataVector[];
    let stringSharedDictionaryVector: StringSharedDictionaryVector;

    beforeEach(() => {
        offsetBuffer = new Int32Array([0, 5, 10, 15]);
        dictionaryBuffer = new Uint8Array([104, 101, 108, 108, 111, 119, 111, 114, 108, 100, 102, 111, 111, 98, 97, 114]);
        dictionaryDataVectors = [
            {name: "vector1", indexBuffer: new Int32Array([0, 1, 2]),
                nullabilityBuffer: new BitVector(new Uint8Array([1, 1, 1]), 3)},
            {name: "vector2", indexBuffer: new Int32Array([0, 1, 2]),
                nullabilityBuffer: new BitVector(new Uint8Array([1, 1, 1]), 3)}
        ];
        stringSharedDictionaryVector = new StringSharedDictionaryVector("test", offsetBuffer, dictionaryBuffer, dictionaryDataVectors);
    });

    test("getString should return correct string value", () => {
        expect(stringSharedDictionaryVector.getString(0, "vector1")).toBe("hello");
        expect(stringSharedDictionaryVector.getString(1, "vector2")).toBe("world");
    });

    test("getValueFromBuffer should return correct map of string values", () => {
        const result = stringSharedDictionaryVector["getValueFromBuffer"](0);
        expect(result.get("vector1")).toBe("hello");
        expect(result.get("vector2")).toBe("world");
    });

    test("filter should return empty array", () => {
        const result = stringSharedDictionaryVector.filter(new Map([["vector1", "hello"]]));
        expect(result).toEqual([]);
    });

    test("filterIn should return empty array", () => {
        const result = stringSharedDictionaryVector.filterIn([new Map([["vector1", "hello"]]), new Map([["vector2", "world"]])]);
        expect(result).toEqual([]);
    });
});
